{
  "openapi": "3.1.0",
  "servers": [
    {
      "url": "https://api.tatum.io"
    }
  ],
  "info": {
    "version": "1.1.2",
    "title": "Blockchain Node RPC"
  },
  "paths": {
    "/v3/blockchain/node/{chain}/{xApiKey}/{rpcPath}": {
      "post": {
        "description": "\u003Cp\u003E\u003Cb\u003EThe number of credits consumed depends on the number of methods submitted in an API call:\u003Cbr/\u003E\n* 50 credits per debug*/trace* method (for EVM-based blockchains)\u003Cbr/\u003E\n* 50 credits per EOS \u003Ca href=\"https://developers.eos.io/manuals/eos/v2.0/nodeos/plugins/trace_api_plugin/api-reference/index\" target=\"_blank\"\u003ETrace API\u003C/a\u003E methods \u003Cbr/\u003E\n* 5 credits per eth_call method (for EVM-based blockchains)\u003Cbr/\u003E\n* 2 credits per any other RPC method\u003C/b\u003E\u003C/p\u003E\n\u003Cp\u003EConnect directly to the blockchain node provided by Tatum.\u003C/p\u003E\n\u003Cp\u003EThe \u003Ccode\u003EPOST\u003C/code\u003E method is used. The API endpoint URL acts as an HTTP-based RPC driver.\u003C/p\u003E\n",
        "operationId": "NodeJsonPostRpcDriver",
        "parameters": [
          {
            "description": "Tatum X-API-Key used for authorization. You can omit this path parameter and either use the X-Api-Key header, or the API key tied to your IP address without any header.",
            "in": "path",
            "name": "xApiKey",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ea8ce228-6ca3-465c-abb0-fd3c5d35c0d5"
            }
          },
          {
            "description": "Blockchain to communicate with.",
            "in": "path",
            "name": "chain",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NodeRpcPostChains"
            }
          },
          {
            "description": "Optional path of rpc call for non EVM nodes, e.g. Algorand or Stellar.",
            "in": "path",
            "name": "rpcPath",
            "required": true,
            "schema": {
              "type": "string",
              "example": "v2/accounts"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A valid Web3 RPC method content body with one or multiple RPC methods",
                "example": {
                  "jsonrpc": "2.0",
                  "method": "web3_clientVersion",
                  "params": [],
                  "id": 2
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A valid RPC response",
                  "example": {
                    "jsonrpc": "2.0",
                    "id": 2,
                    "result": "Geth/v1.9.9-omnibus-e320ae4c-20191206/linux-amd64/go1.13.4"
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "500": {
            "$ref": "#/components/responses/Error500"
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Connect to the blockchain node through an RPC driver",
        "tags": [
          "Node RPC"
        ]
      },
      "put": {
        "description": "\u003Cp\u003E\u003Cb\u003E2 credits per RPC method in an API call\u003C/b\u003E\u003C/p\u003E\n\u003Cp\u003EConnect directly to the blockchain node provided by Tatum.\u003C/p\u003E\n\u003Cp\u003EThe \u003Ccode\u003EPUT\u003C/code\u003E method is used. The API endpoint URL acts as an HTTP-based RPC driver.\u003C/p\u003E\n",
        "operationId": "NodeJsonRpcPutDriver",
        "parameters": [
          {
            "description": "Tatum X-API-Key used for authorization. You can omit this path parameter and either use the X-Api-Key header, or the API key tied to your IP address without any header.",
            "in": "path",
            "name": "xApiKey",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ea8ce228-6ca3-465c-abb0-fd3c5d35c0d5"
            }
          },
          {
            "description": "Blockchain to communicate with.",
            "in": "path",
            "name": "chain",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NodeRpcPutChains"
            }
          },
          {
            "description": "Optional path of rpc call for non EVM nodes, e.g. Algorand or Stellar.",
            "in": "path",
            "name": "rpcPath",
            "required": true,
            "schema": {
              "type": "string",
              "example": "v2/accounts"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "A valid Web3 RPC method content body with one or multiple RPC methods",
                "example": {
                  "jsonrpc": "2.0",
                  "method": "web3_clientVersion",
                  "params": [],
                  "id": 2
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A valid RPC response",
                  "example": {
                    "jsonrpc": "2.0",
                    "id": 2,
                    "result": "Geth/v1.9.9-omnibus-e320ae4c-20191206/linux-amd64/go1.13.4"
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "500": {
            "$ref": "#/components/responses/Error500"
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Connect to the blockchain node through an RPC driver",
        "tags": [
          "Node RPC"
        ]
      },
      "get": {
        "description": "\u003Cp\u003E\u003Cb\u003E2 credits per RPC method in an API call\u003C/b\u003E\u003C/p\u003E\n\u003Cp\u003EConnect directly to the blockchain node provided by Tatum.\u003C/p\u003E\n\u003Cp\u003EThe \u003Ccode\u003EGET\u003C/code\u003E method is used. The API endpoint URL acts as an HTTP-based RPC driver.\u003C/p\u003E\n",
        "operationId": "NodeJsonRpcGetDriver",
        "parameters": [
          {
            "description": "Tatum X-API-Key used for authorization. You can omit this path parameter and either use the X-Api-Key header, or the API key tied to your IP address without any header.",
            "in": "path",
            "name": "xApiKey",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ea8ce228-6ca3-465c-abb0-fd3c5d35c0d5"
            }
          },
          {
            "description": "Blockchain to communicate with.",
            "in": "path",
            "name": "chain",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/NodeRpcGetChains"
            }
          },
          {
            "description": "Optional path of rpc call for non EVM nodes, e.g. Algorand or Stellar.",
            "in": "path",
            "name": "rpcPath",
            "required": true,
            "schema": {
              "type": "string",
              "example": "v2/accounts"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A valid RPC response",
                  "example": {
                    "jsonrpc": "2.0",
                    "id": 2,
                    "result": "Geth/v1.9.9-omnibus-e320ae4c-20191206/linux-amd64/go1.13.4"
                  }
                }
              }
            },
            "description": "OK"
          },
          "400": {
            "$ref": "#/components/responses/Error400"
          },
          "401": {
            "$ref": "#/components/responses/Error401"
          },
          "403": {
            "$ref": "#/components/responses/Error403"
          },
          "500": {
            "$ref": "#/components/responses/Error500"
          }
        },
        "security": [
          {
            "X-API-Key": []
          }
        ],
        "x-codeSamples": [],
        "summary": "Connect to the blockchain node through an RPC driver",
        "tags": [
          "Node RPC"
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Error400": {
        "properties": {
          "errorCode": {
            "example": "validation.failed",
            "description": "validation.failed",
            "type": "string"
          },
          "message": {
            "example": "Request validation failed. Please see data for additional information.",
            "description": "Request validation failed. Please see data for additional information.",
            "type": "string"
          },
          "statusCode": {
            "example": 400,
            "description": "400",
            "type": "number"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "target"
              ],
              "properties": {
                "target": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Request object present in the body of the HTTP request",
                  "example": {
                    "property": 12345
                  }
                },
                "value": {
                  "type": "number",
                  "description": "Value of the target object which validation is wrong. Can be of any data type, example here is using type number.",
                  "example": 12345
                },
                "property": {
                  "type": "string",
                  "description": "Property name of the target object which validation is wrong",
                  "example": "property1"
                },
                "constraints": {
                  "type": "object",
                  "additionalProperties": true,
                  "description": "Object of failed constraints for the target object. Key is the constraint, value is detailed description of the failed constraint.",
                  "example": {
                    "min": "property1 must not be less than 50000"
                  }
                }
              }
            }
          }
        },
        "required": [
          "errorCode",
          "message",
          "statusCode",
          "data"
        ],
        "type": "object"
      },
      "Error401Invalid": {
        "properties": {
          "errorCode": {
            "example": "subscription.invalid",
            "description": "subscription.invalid",
            "type": "string"
          },
          "message": {
            "example": "Unable to find valid subscription for '${apiKey}'",
            "description": "Unable to find valid subscription for '${apiKey}'",
            "type": "string"
          },
          "statusCode": {
            "example": 401,
            "description": "401",
            "type": "number"
          }
        },
        "required": [
          "errorCode",
          "message",
          "statusCode"
        ],
        "type": "object"
      },
      "Error401NotActive": {
        "properties": {
          "errorCode": {
            "example": "subscription.not.active",
            "description": "subscription.not.active",
            "type": "string"
          },
          "message": {
            "example": "Subscription not active anymore.",
            "description": "Subscription not active anymore.",
            "type": "string"
          },
          "statusCode": {
            "example": 401,
            "description": "401",
            "type": "number"
          }
        },
        "required": [
          "errorCode",
          "message",
          "statusCode"
        ],
        "type": "object"
      },
      "Error403": {
        "properties": {
          "message": {
            "example": "Forbidden",
            "description": "Forbidden",
            "type": "string"
          },
          "statusCode": {
            "example": 403,
            "description": "403",
            "type": "number"
          }
        },
        "required": [
          "statusCode",
          "message"
        ],
        "type": "object"
      },
      "Error401": {
        "properties": {
          "message": {
            "example": "Unauthorized",
            "description": "Unauthorized",
            "type": "string"
          },
          "statusCode": {
            "example": 401,
            "description": "401",
            "type": "number"
          }
        },
        "required": [
          "statusCode",
          "message"
        ],
        "type": "object"
      },
      "Error500": {
        "properties": {
          "message": {
            "example": "Internal server error",
            "description": "Internal server error",
            "type": "string"
          },
          "statusCode": {
            "example": 500,
            "description": "500",
            "type": "number"
          }
        },
        "required": [
          "statusCode",
          "message"
        ],
        "type": "object"
      },
      "NodeRpcPutChains": {
        "type": "string",
        "example": "algorand-testnet-algod",
        "enum": [
          "algorand-mainnet-algod",
          "algorand-mainnet-indexer",
          "algorand-testnet-algod",
          "algorand-testnet-indexer",
          "bnb-mainnet",
          "bnb-testnet",
          "egld-mainnet",
          "egld-testnet",
          "stellar-mainnet",
          "stellar-testnet",
          "ton-mainnet",
          "ton-testnet"
        ]
      },
      "NodeRpcGetChains": {
        "type": "string",
        "example": "algorand-testnet-algod",
        "enum": [
          "algorand-mainnet-algod",
          "algorand-mainnet-indexer",
          "algorand-testnet-algod",
          "algorand-testnet-indexer",
          "bnb-mainnet",
          "bnb-testnet",
          "egld-mainnet",
          "egld-testnet",
          "flow-mainnet",
          "flow-testnet",
          "iota-mainnet",
          "iota-testnet",
          "kadena-mainnet",
          "kadena-testnet",
          "lisk-mainnet",
          "lisk-testnet",
          "stellar-mainnet",
          "stellar-testnet",
          "tezos-mainnet",
          "tezos-testnet",
          "tron-mainnet",
          "tron-testnet",
          "ton-mainnet",
          "ton-testnet"
        ]
      },
      "NodeRpcPostChains": {
        "type": "string",
        "example": "ethereum-mainnet",
        "enum": [
          "algorand-mainnet-algod",
          "algorand-mainnet-indexer",
          "algorand-testnet-algod",
          "algorand-testnet-indexer",
          "arb-nova-mainnet",
          "arb-one-mainnet",
          "arb-testnet",
          "aurora-mainnet",
          "aurora-testnet",
          "avax-mainnet",
          "avax-p-mainnet",
          "avax-p-testnet",
          "avax-testnet",
          "avax-x-mainnet",
          "avax-x-testnet",
          "base-mainnet",
          "base-sepolia",
          "bch-mainnet",
          "bch-mainnet-rostrum",
          "bch-testnet-rostrum",
          "bch-testnet",
          "bnb-mainnet",
          "bnb-testnet",
          "bsc-mainnet",
          "bsc-testnet",
          "bitcoin-mainnet",
          "bitcoin-mainnet-electrs",
          "bitcoin-testnet-electrs",
          "bitcoin-testnet",
          "cardano-mainnet",
          "cardano-preprod",
          "casper-mainnet",
          "celo-mainnet",
          "celo-testnet",
          "chiliz-mainnet",
          "chiliz-testnet",
          "cosmos-mainnet",
          "cosmos-testnet",
          "cro-mainnet",
          "cro-testnet",
          "doge-mainnet",
          "doge-testnet",
          "dot-mainnet",
          "dot-testnet",
          "egld-mainnet",
          "egld-testnet",
          "eos-mainnet",
          "eos-testnet",
          "eon-mainnet",
          "eon-testnet",
          "ethereum-classic-mainnet",
          "ethereum-classic-testnet",
          "ethereum-holesky",
          "ethereum-mainnet",
          "ethereum-sepolia",
          "fantom-mainnet",
          "fantom-testnet",
          "flare-coston",
          "flare-coston2",
          "flare-mainnet",
          "flare-songbird",
          "flow-mainnet",
          "flow-testnet",
          "gno-mainnet",
          "gno-testnet",
          "haqq-mainnet",
          "haqq-testnet",
          "iota-mainnet",
          "iota-testnet",
          "kadena-mainnet",
          "kadena-testnet",
          "klaytn-baobab",
          "klaytn-cypress",
          "ksm-mainnet",
          "ksm-testnet",
          "kcs-mainnet",
          "kcs-testnet",
          "lisk-mainnet",
          "lisk-testnet",
          "litecoin-core-mainnet",
          "litecoin-core-testnet",
          "near-mainnet",
          "near-testnet",
          "oasis-mainnet",
          "oasis-testnet",
          "one-mainnet-s0",
          "one-testnet-s0",
          "optimism-mainnet",
          "optimism-testnet",
          "palm-mainnet",
          "palm-testnet",
          "polygon-amoy",
          "polygon-mainnet",
          "ripple-mainnet",
          "ripple-testnet",
          "rsk-mainnet",
          "rsk-testnet",
          "solana-devnet",
          "solana-mainnet",
          "stellar-mainnet",
          "stellar-testnet",
          "tezos-mainnet",
          "tezos-testnet",
          "ton-mainnet",
          "ton-testnet",
          "tron-mainnet",
          "tron-testnet",
          "vechain-mainnet",
          "vechain-testnet",
          "xdc-mainnet",
          "xdc-testnet",
          "zcash-mainnet",
          "zcash-testnet",
          "zilliqa-mainnet",
          "zilliqa-testnet",
          "zksync-mainnet",
          "zksync-testnet"
        ]
      }
    },
    "responses": {
      "Error400": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error400"
            }
          }
        }
      },
      "Error401": {
        "description": "Unauthorized. Not valid or inactive subscription key present in the HTTP Header.",
        "content": {
          "application/json": {
            "schema": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Error401NotActive"
                },
                {
                  "$ref": "#/components/schemas/Error401Invalid"
                }
              ]
            }
          }
        }
      },
      "Error403": {
        "description": "Forbidden. The request is authenticated, but it is not possible to perform the operation due to logical error or invalid permissions.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error403"
            }
          }
        }
      },
      "Error500": {
        "description": "Internal server error. There was an error on the server during the processing of the request.",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error500"
            }
          }
        }
      }
    },
    "parameters": {
      "ApiKey": {
        "description": "Tatum X-API-Key used for authorization. You can omit this path parameter and either use the X-Api-Key header, or the API key tied to your IP address without any header.",
        "in": "path",
        "name": "xApiKey",
        "required": true,
        "schema": {
          "type": "string",
          "example": "t-66a730ccccfd17001c479705-2f597d14ad7543f289a03418"
        }
      }
    },
    "securitySchemes": {
      "X-API-Key": {
        "type": "apiKey",
        "name": "x-api-key",
        "in": "header",
        "description": "Your **API key** is used to identify your account & your plan, including the number of API calls per second and total monthly calls you have.\n\nEach key is for individual use only.\n\nIf you don't have a key already you can [Sign up for a Free Tatum account](https://co.tatum.io/signup) to get two keys (testnet and mainnet), allowing up to 5 API calls per second and 1,000,000 Credits.\n\nFor testing purposes, you can use the following key which only works inside docs and has limited functionality (e.g. you cannot create virtual accounts or notification subscriptions with it):\n* t-66a730ccccfd17001c479705-2f597d14ad7543f289a03418\n\nFor more details on limits and plans, [click here](https://docs.tatum.io/docs/plans-limits).\n"
      }
    }
  },
  "x-readme": {
    "explorer-enabled": true,
    "proxy-enabled": true
  }
}